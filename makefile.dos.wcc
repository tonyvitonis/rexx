#
# Makefile for Regina REXX Interpreter using OpenWatcom C/C++ 1.0+
#
# set the environment variable REGINA_SRCDIR and then call
#
# wmake -f makefile.win32.wcc [DEBUG=Y] [FLISTS=N] [MULTI=Y]
#
SRC=$(%REGINA_SRCDIR)
REGUTILSRCDIR=$(SRC)\regutil

!include $(SRC)\regina.ver
VERDOT = $(VER_DOT)
VER = $(VER)
VERDATE = $(VER_DATE)
BITS=32

LIBFILE=regina.lib
REGUTILLIBFILE=regutil.lib
DLLBASE=regina
CC		= *wcc386
TARGET=dos4g
MULTI = N

!ifeq DEBUG Y
CFLAGS  = /d2
LDFLAGS = DEBUG WATCOM ALL
!ifeq TRACEMEM Y
MEMTRACE = /DTRACEMEM
!else
MEMTRACE =
!endif
!else
CFLAGS  =  /DNDEBUG /oneatx
LDFLAGS =
!endif

!ifeq FLISTS N
NOFLISTS = /uFLISTS
!else
NOFLISTS =
!endif

THREADING_COMPILE =
MT_FILE = mt_notmt
THREADING_TARGET =

OFILES =      &
funcs.obj     &
builtin.obj   &
error.obj     &
variable.obj  &
interprt.obj  &
debug.obj     &
dbgfuncs.obj  &
memory.obj    &
parsing.obj   &
files.obj     &
misc.obj      &
unxfuncs.obj  &
os2funcs.obj  &
cmsfuncs.obj  &
arxfuncs.obj  &
shell.obj     &
rexxext.obj   &
stack.obj     &
tracing.obj   &
interp.obj    &
cmath.obj     &
convert.obj   &
strengs.obj   &
library.obj   &
strmath.obj   &
signals.obj   &
macros.obj    &
envir.obj     &
expr.obj      &
yaccsrc.obj   &
lexsrc.obj    &
wrappers.obj  &
options.obj   &
instore.obj   &
extstack.obj  &
rexxbif.obj   &
$(MT_FILE).obj   &
os_other.obj  &
mygetopt.obj

DOFILES =      &
funcs.obj     &
builtin.obj   &
error.obj     &
variable.obj  &
interprt.obj  &
debug.obj     &
dbgfuncs.obj  &
memory.obj    &
parsing.obj   &
files.obj     &
misc.obj      &
unxfuncs.obj  &
os2funcs.obj  &
cmsfuncs.obj  &
arxfuncs.obj  &
shell.obj     &
rexxext.obj   &
stack.obj     &
tracing.obj   &
interp.obj    &
cmath.obj     &
convert.obj   &
strengs.obj   &
dlibrary.obj   &
strmath.obj   &
signals.obj   &
macros.obj    &
envir.obj     &
expr.obj      &
yaccsrc.obj   &
lexsrc.obj    &
dwrappers.obj  &
options.obj   &
instore.obj   &
extstack.obj  &
rexxbif.obj   &
$(MT_FILE).obj   &
os_other.obj  &
staticld.obj  &
mygetopt.obj

REGUTILOFILES = regfilesys.obj regini.obj regmacrospace.obj &
		regsemdos.obj regutil.obj rxsupport.obj random.obj regstem.obj &
		regunicode.obj regcrypt.obj regtrig.obj inifile.obj &
regscreendos.obj

#
# if VER_SUPP not blank, may need to add double quotes
#
DCFLAGS = /DDYNAMIC_STATIC /DDYNAMIC /DHAVE_REGUTIL_PACKAGE
CEXTRA   = -DREGINA_BITS=$(BITS)
CPPFLAGS = /DDOS /i=$(SRC)
CCFLAGS  = /ei /zq /mf /wx $(CFLAGS) $(CPPFLAGS) $(CEXTRA) $(MEMTRACE) $(NOFLISTS)
REGUTILCOPT = /DNOT_LIKE_IBM
LINK		= wlink
LIBEXE		= wlib
LIBFLAGS		= /q /n
HFILES = $(SRC)\rexx.h $(SRC)\defs.h $(SRC)\extern.h $(SRC)\regina_t.h $(SRC)\strengs.h
MTSSRC = $(SRC)\en.mts $(SRC)\pt.mts $(SRC)\no.mts $(SRC)\de.mts $(SRC)\es.mts $(SRC)\pl.mts $(SRC)\tr.mts $(SRC)\sv.mts

all : rexx.exe regina.exe execiser.exe $(LIBFILE) mtb_files

how :
 echo wmake -f $(SRCDIR)\makefile.win32.wcc DEBUG=$(DEBUG) TRACEMEM=$(TRACEMEM) FLISTS=$(FLISTS) SOCKET=$(SOCKET) ^%1 ^%2 > rebuild.bat

rexx.exe : $(OFILES) rexx.obj nosaa.obj
	@%create dummy.lnk
	@%append dummy.lnk option quiet
	@%append dummy.lnk system $(TARGET)
	@%append dummy.lnk name rexx.exe
	@%append dummy.lnk file rexx.obj
	@%append dummy.lnk file nosaa.obj
	for %i in ($(OFILES)) do %append dummy.lnk file %i
	$(LINK) $(LDFLAGS) @dummy.lnk
	del dummy.lnk

regina.exe : $(LIBFILE) regina.obj $(REGUTILLIBFILE)
	@%create dummy.lnk
	@%append dummy.lnk option quiet
	@%append dummy.lnk system $(TARGET)
	@%append dummy.lnk name regina.exe
	@%append dummy.lnk file regina.obj
	@%append dummy.lnk file $(LIBFILE)
	@%append dummy.lnk file $(REGUTILLIBFILE)
	$(LINK) $(LDFLAGS) @dummy.lnk
	del dummy.lnk

execiser.exe : $(LIBFILE) execiser.obj
	@%create dummy.lnk
	@%append dummy.lnk option quiet
	@%append dummy.lnk system $(TARGET)
	@%append dummy.lnk name execiser.exe
	@%append dummy.lnk file execiser.obj
	@%append dummy.lnk file $(LIBFILE)
	@%append dummy.lnk file $(REGUTILLIBFILE)
	$(LINK) $(LDFLAGS) @dummy.lnk
	del dummy.lnk

rxstack.exe : rxstack.obj erexxbif.obj eextstack.obj libsha1.obj mygetopt.obj
	@%create dummy.lnk
	@%append dummy.lnk option quiet
	@%append dummy.lnk option stack=0x10000000
	@%append dummy.lnk option heapsize=40960
	@%append dummy.lnk system $(TARGET)
	@%append dummy.lnk name rxstack.exe
	@%append dummy.lnk file rxstack.obj
	@%append dummy.lnk file eextstack.obj
	@%append dummy.lnk file erexxbif.obj
	@%append dummy.lnk file libsha1.obj
	@%append dummy.lnk file mygetopt.obj
	$(LINK) $(LDFLAGS) @dummy.lnk
	del dummy.lnk

rxqueue.exe : rxqueue.obj erexxbif.obj eextstack.obj mygetopt.obj
	@%create dummy.lnk
	@%append dummy.lnk option quiet
	@%append dummy.lnk option stack=0x10000000
	@%append dummy.lnk option heapsize=40960
	@%append dummy.lnk system $(TARGET)
	@%append dummy.lnk name rxqueue.exe
	@%append dummy.lnk file rxqueue.obj
	@%append dummy.lnk file eextstack.obj
	@%append dummy.lnk file erexxbif.obj
	@%append dummy.lnk file mygetopt.obj
	$(LINK) $(LDFLAGS) @dummy.lnk
	del dummy.lnk

$(LIBFILE): $(DOFILES) client.obj drexx.obj rexxsaa.obj
	@%create lib.rsp
	@%append lib.rsp +client.obj
	@%append lib.rsp +drexx.obj
	@%append lib.rsp +rexxsaa.obj
	for %i in ($(DOFILES)) do %append lib.rsp +%i
	$(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
	del lib.rsp

$(REGUTILLIBFILE): $(REGUTILOFILES)
	@%create lib.rsp
	for %i in ($(REGUTILOFILES)) do %append lib.rsp +%i
	$(LIBEXE) $(LIBFLAGS) $@ @lib.rsp
	del lib.rsp

#
# rules for making normal object files
#
funcs.obj:    $(SRC)\funcs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
builtin.obj:  $(SRC)\builtin.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
error.obj:    $(SRC)\error.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
variable.obj: $(SRC)\variable.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
interprt.obj: $(SRC)\interprt.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
debug.obj:    $(SRC)\debug.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
dbgfuncs.obj: $(SRC)\dbgfuncs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
memory.obj:   $(SRC)\memory.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
parsing.obj:  $(SRC)\parsing.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
files.obj:    $(SRC)\files.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
misc.obj:     $(SRC)\misc.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
unxfuncs.obj: $(SRC)\unxfuncs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
arxfuncs.obj: $(SRC)\arxfuncs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
os2funcs.obj: $(SRC)\os2funcs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
cmsfuncs.obj: $(SRC)\cmsfuncs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
shell.obj:    $(SRC)\shell.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
rexxext.obj:  $(SRC)\rexxext.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
stack.obj:    $(SRC)\stack.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
tracing.obj:  $(SRC)\tracing.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
interp.obj:   $(SRC)\interp.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
cmath.obj:    $(SRC)\cmath.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
convert.obj:  $(SRC)\convert.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
strengs.obj:  $(SRC)\strengs.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
library.obj:  $(SRC)\library.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
strmath.obj:  $(SRC)\strmath.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
signals.obj:  $(SRC)\signals.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
macros.obj:   $(SRC)\macros.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
envir.obj:    $(SRC)\envir.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
expr.obj:     $(SRC)\expr.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
wrappers.obj: $(SRC)\wrappers.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
options.obj:  $(SRC)\options.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
os_other.obj:   $(SRC)\os_other.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
staticld.obj:   $(SRC)\staticld.c $(HFILES)
	$(CC) $(CCFLAGS) $(DCFLAGS) /fo=$@ $(SRC)\$*.c
mygetopt.obj: $(SRC)\mygetopt.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
libsha1.obj:  $(SRC)\contrib\libsha1.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\contrib\$*.c
instore.obj:  $(SRC)\instore.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
extstack.obj:  $(SRC)\extstack.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
rexxbif.obj:  $(SRC)\rexxbif.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
eextstack.obj:  $(SRC)\extstack.c $(HFILES)
	$(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\extstack.c
erexxbif.obj:  $(SRC)\rexxbif.c $(HFILES)
	$(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\rexxbif.c
rxstack.obj:  $(SRC)\rxstack.c $(HFILES)
	$(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\$*.c
rxqueue.obj:  $(SRC)\rxqueue.c $(HFILES)
	$(CC) -DEXTERNAL_TO_REGINA $(CCFLAGS) /fo=$@ $(SRC)\$*.c
nosaa.obj:    $(SRC)\nosaa.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
mt_win32.obj: $(SRC)\mt_win32.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
mt_notmt.obj: $(SRC)\mt_notmt.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
rexx.obj:   $(SRC)\rexx.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
lexsrc.obj : $(SRC)\lexsrc.c $(SRC)\yaccsrc.h $(SRC)\rexx.h
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
#lexsrc.c : lexsrc.l
#       $(LEX) lexsrc.l
#       $(MV) lex.yy.c lexsrc.c
yaccsrc.obj: $(SRC)\yaccsrc.c $(SRC)\defs.h $(SRC)\rexx.h
	$(CC) $(CCFLAGS) /DYYMAXDEPTH=10000 /fo=$@ $(SRC)\$*.c
#yaccsrc.c yaccsrc.h : yaccsrc.y
#       $(YACC) -dv yaccsrc.y
#       $(MV) y.tab.h yaccsrc.h
#       $(MV) y.tab.c yaccsrc.c
drexx.obj: $(SRC)\rexx.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=drexx.obj -DRXLIB $(SRC)\rexx.c
client.obj: $(SRC)\client.c $(HFILES) $(SRC)\rexxsaa.h $(SRC)\rxiface.h
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
rexxsaa.obj: $(SRC)\rexxsaa.c $(HFILES) $(SRC)\rexxsaa.h $(SRC)\rxiface.h
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c
# static dynamic loading
dlibrary.obj:  $(SRC)\library.c $(HFILES)
	$(CC) $(CCFLAGS) $(DCFLAGS) /fo=$@ $(SRC)\library.c
dwrappers.obj: $(SRC)\wrappers.c $(HFILES)
	$(CC) $(CCFLAGS) $(DCFLAGS) /fo=$@ $(SRC)\wrappers.c


regina.obj:   $(SRC)\regina.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$*.obj $(SRC)\$*.c
rexxa.obj:   $(SRC)\regina.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$*.obj $(SRC)\regina.c
execiser.obj:   $(SRC)\execiser.c $(HFILES)
	$(CC) $(CCFLAGS) /fo=$*.obj $(SRC)\$*.c
threader.obj:   $(SRC)\threader.c $(HFILES)
	$(CC) $(CCFLAGS) -DWIN32_THREADS /fo=$*.obj $(SRC)\$*.c

#
# Rules for Regutil
#
# ole32.lib oleaut32.lib uuid.lib

regfilesys.obj : $(REGUTILSRCDIR)\regfilesys.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regini.obj : $(REGUTILSRCDIR)\regini.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regmacrospace.obj : $(REGUTILSRCDIR)\regmacrospace.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regscreendos.obj : $(REGUTILSRCDIR)\regscreendos.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regsemdos.obj : $(REGUTILSRCDIR)\regsemdos.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regsysparm.obj : $(REGUTILSRCDIR)\regsysparm.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regutil.obj : $(REGUTILSRCDIR)\regutil.c $(REGUTILSRCDIR)\regutil.h $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) $(DCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

rxsupport.obj : $(REGUTILSRCDIR)\rxsupport.c $(REGUTILSRCDIR)\rxproto.h
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

random.obj : $(REGUTILSRCDIR)\random.c
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regstem.obj : $(REGUTILSRCDIR)\regstem.c
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regunicode.obj : $(REGUTILSRCDIR)\regunicode.c
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regcrypt.obj : $(REGUTILSRCDIR)\regcrypt.c
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

regtrig.obj : $(REGUTILSRCDIR)\regtrig.c
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

inifile.obj : $(REGUTILSRCDIR)\inifile.c
   $(CC) $(REGUTILCOPT) $(CCFLAGS) /fo=$*.obj $(REGUTILSRCDIR)\$*.c

#
# Convert .mts to .mtb
#
mtb_files: msgcmp.exe $(MTSSRC) .SYMBOLIC
	for %i in ($(MTSSRC)) do msgcmp %i

msgcmp.exe : msgcmp.obj
	@%create dummy.lnk
	@%append dummy.lnk option quiet
	@%append dummy.lnk system $(TARGET)
	@%append dummy.lnk name msgcmp.exe
	@%append dummy.lnk file msgcmp.obj
	$(LINK) $(LDFLAGS) @dummy.lnk
	del dummy.lnk

msgcmp.obj: $(SRC)\msgcmp.c
	$(CC) $(CCFLAGS) /fo=$@ $(SRC)\$*.c

zip: .SYMBOLIC
	zip regina$(VER)dos4gw README README.DOS4G rexx.exe regina.exe execiser.exe
	zip regina$(VER)dos4gw regina.lib regutil.lib
	copy demo\dateconv.rexx .\dateconv.rex
	copy demo\timeconv.rexx .\timeconv.rex
	copy demo\rexxcps.rexx .\rexxcps.rex
	copy regutil\regutil.rexx .\regutil.rex
	zip regina$(VER)dos4gw dateconv.rex timeconv.rex rexxcps.rex regutil.rex
# DO NOT DELETE THIS LINE -- make depend depends on it.
